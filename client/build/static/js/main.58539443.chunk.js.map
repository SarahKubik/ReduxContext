{"version":3,"sources":["assets/spinner.gif","utils/reducers.js","utils/actions.js","utils/store.js","utils/helpers.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","pages/Success.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","products","cart","cartOpen","categories","currentCategory","reducer","state","action","type","product","newState","filter","_id","length","map","purchaseQuantity","store","createStore","subscribe","console","log","getState","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductItem","item","useSelector","dispatch","useDispatch","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","setCategory","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","Success","addOrder","setTimeout","saveOrder","client","ApolloClient","operation","setContext","headers","authorization","uri","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.58539443.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","import {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from './actions';\n\nconst initialState = {\nproducts: [],\ncart: [],\ncartOpen: false,\ncategories: [],\ncurrentCategory: ''\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n      // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n      case UPDATE_PRODUCTS:\n          return {\n              ...state,\n              products: [...action.products]\n          };\n      // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n      case UPDATE_CATEGORIES:\n          return {\n              ...state,\n              categories: [...action.categories]\n          };\n\n      case UPDATE_CURRENT_CATEGORY:\n          return {\n              ...state,\n              currentCategory: action.currentCategory\n          };\n\n      case ADD_TO_CART:\n          return {\n              ...state,\n              cartOpen: true,\n              cart: [...state.cart, action.product]\n          };\n\n      case ADD_MULTIPLE_TO_CART:\n          return {\n            ...state,\n            cart: [...state.cart, ...action.products],\n          };\n\n      case REMOVE_FROM_CART:\n          let newState = state.cart.filter(product => {\n            return product._id !== action._id;\n          });\n\n          return {\n            ...state,\n            cartOpen: newState.length > 0,\n            cart: newState\n          };\n\n      case UPDATE_CART_QUANTITY:\n          return {\n            ...state,\n            cartOpen: true,\n            cart: state.cart.map(product => {\n              if (action._id === product._id) {\n                product.purchaseQuantity = action.purchaseQuantity;\n              }\n              return product;\n            })\n          };\n\n      case CLEAR_CART:\n          return {\n            ...state,\n            cartOpen: false,\n            cart: []\n          };\n\n      case TOGGLE_CART:\n          return {\n            ...state,\n            cartOpen: !state.cartOpen\n          };\n\n      default:\n          return state;\n  }\n};\n\nexport default reducer;","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","// import { createStore } from 'redux';\r\n// import { combineReducers } from 'redux';\r\n\r\n\r\n// const store = createStore(combineReducers,\r\n//     {},\r\n//     //view redux tools in browser\r\n//     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n\r\n//     );\r\n// export default store;\r\n\r\nimport { createStore } from 'redux';\r\nimport { reducer } from './reducers';\r\n\r\n// Create a Redux store holding the state of your app.\r\n// Its API is { subscribe, dispatch, getState }.\r\nlet store = createStore(reducer);\r\n\r\n// You can use subscribe() to update the UI in response to state changes.\r\n// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\r\n// There may be additional use cases where it's helpful to subscribe as well.\r\n\r\nstore.subscribe(() => console.log(store.getState()));\r\n\r\n\r\nexport default store;","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function(e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n\n  });\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\";\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductItem(item) {\n  const state = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const { cart } = state\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;","import gql from 'graphql-tag';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n{\n  categories {\n    _id\n    name\n  }\n}\n`;\n\nexport const QUERY_USER = gql`\n{\n  user {\n    firstName\n    lastName\n    orders {\n      _id\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        image\n      }\n    }\n  }\n}\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\n\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\";\n\nfunction ProductList() {\n  const state = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if(data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ?\n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;","import React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu({ setCategory }) {\n  const state = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  const { categories } = state;\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nconst CartItem = ({ item }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const removeFromCart = item => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: item._id\r\n    });\r\n    idbPromise('cart', 'delete', { ...item });\r\n\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const value = e.target.value;\r\n    if (value === '0') {\r\n      dispatch({\r\n        type: REMOVE_FROM_CART,\r\n        _id: item._id\r\n      });\r\n      idbPromise('cart', 'delete', { ...item });\r\n\r\n    } else {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: item._id,\r\n        purchaseQuantity: parseInt(value)\r\n      });\r\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex-row\">\r\n      <div>\r\n        <img\r\n          src={`/images/${item.image}`}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <div>{item.name}, ${item.price}</div>\r\n        <div>\r\n          <span>Qty:</span>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1\"\r\n            value={item.purchaseQuantity}\r\n            onChange={onChange}\r\n          />\r\n          <span\r\n            role=\"img\"\r\n            aria-label=\"trash\"\r\n            onClick={() => removeFromCart(item)}\r\n          >\r\n            🗑️\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();","import React, { useEffect } from \"react\";\nimport { idbPromise } from \"../../utils/helpers\"\nimport CartItem from \"../CartItem\";\nimport Auth from \"../../utils/auth\";\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport \"./style.css\";\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/react-hooks';\n\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\n\nconst Cart = () => {\n  const state = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    };\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds }\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span\n          role=\"img\"\n          aria-label=\"trash\">🛒</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {\n              Auth.loggedIn() ?\n              <button onClick={submitCheckout}>\n                Checkout\n              </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n      ) : (\n          <h3>\n            <span role=\"img\" aria-label=\"shocked\">\n              😱\n          </span>\n          You haven't added anything to your cart yet!\n          </h3>\n        )}\n    </div>\n  );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport Cart from \"../components/Cart\";\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from \"../utils/actions\";\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport { idbPromise } from \"../utils/helpers\";\nimport spinner from '../assets/spinner.gif'\n\nfunction Detail() {\n  const state = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n\n    }\n  }\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button\n              disabled={!cart.find(p => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import gql from 'graphql-tag';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n      }\n    }\n  }\n`;\n\n\nexport const ADD_USER = gql`\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from \"../utils/helpers\"\nimport Jumbotron from '../components/Jumbotron/index.js';\n\n\n\nfunction Success() {\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n        async function saveOrder() {\n            const cart = await idbPromise('cart', 'get');\n            const products = cart.map(item => item._id);\n\n            if (products.length) {\n                const { data } = await addOrder({ variables: { products } });\n                const productData = data.addOrder.products;\n\n                productData.forEach((item) => {\n                  idbPromise('cart', 'delete', item);\n                });\n            }\n\n            setTimeout(window.location.assign('./'), 3000);\n        }\n\n        saveOrder();\n    }, [addOrder]);\n\n    return (\n      <div>\n        <Jumbotron>\n          <h1>Success!</h1>\n          <h2>\n            Thank you for your purchase!\n          </h2>\n          <h2>\n            You will now be redirected to the homepage\n          </h2>\n        </Jumbotron>\n      </div>\n    );\n};\n\nexport default Success;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nimport {Provider} from \"react-redux\";\nimport store from \"./utils/store\";\n\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\nimport OrderHistory from \"./pages/OrderHistory\";\nimport Success from \"./pages/Success\";\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}